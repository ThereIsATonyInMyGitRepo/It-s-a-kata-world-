kata: https://www.codewars.com/kata/playing-with-passphrases
cod:

		#include <string>

		class PlayPass
		{
		  public:
		  static std::string playPass(const std::string &s, int n);
		};

		std::string PlayPass::playPass(const std::string &s, int n)
		{
		  std::string returnStr;
		  for(int i = s.length()-1;i >=0 ;--i)
			returnStr += s[i] > 64 && s[i] <91 ? i % 2 == 0 ? (s[i] + n - 65) % 26 + 65 : ((s[i] + n) -65) % 26 + 97 : s[i] > 47 && s[i] <58 ? 105 - s[i] : s[i] ; 
		  
		  return returnStr;
		}
		

kata: https://www.codewars.com/kata/is-my-friend-cheating
cod:

		#include <vector>
		using namespace std;

		class RemovedNumbers
		{
		public:
			static vector<vector<long long>> removNb(long long n);
		};

		vector<vector<long long>> RemovedNumbers::removNb(long long n)
		{
		  long long sum = n % 2 == 0 ? n / 2 * (n + 1) : (n + 1) / 2 * n;
		  vector<vector<long long>> returnVec;
		  
		  for(int i = 1; i <= n; ++i)
			if( (sum-i) / i == (sum-i) % i || ((sum-i) / i )-1 == (sum-i) % i + i)
			  returnVec.push_back(vector<long long>() = {i,(sum-i) % i + (  (sum-i) / i -1 == (sum-i) % i + i ? i : 0)} );
		  return returnVec;
		}
		

kata: https://www.codewars.com/kata/product-of-consecutive-fib-numbers
cod:

		#include <vector>
		typedef unsigned long long ull;
		class ProdFib
		{
		public:
		  static std::vector<ull> productFib(ull prod);
		};

		std::vector<ull> ProdFib::productFib(ull prod)
		{
		  ull a,b,c;
		  a=1;
		  b=1;
		  ull sum=2;
		  
		  while(sum < prod)
		  {
			c=a+b;
			sum+=c*c;
			a=b;
			b=c;
		  }
		  return std::vector<ull>()={b,b+a,sum == prod? true : false};
		}
		//Am vazut la solutii ca exista o metoda mai eleganta cu swap. Si am vazut ca m-am complicat
		

kata: https://www.codewars.com/kata/range-extraction
cod:
	
		//ar trebui sa mai curat din cod
		#include <string>
		#include <vector>
		#include<iostream>
		using namespace std;
		std::string pars(int n) 
		{
		  std::string retStr,temp;
		  if(n<0)
		  {
			retStr+='-';
			n*=-1;
		  }
		  if(n==0)
			temp+=(char)(n%10+48);
		  while(n>0)
		  {
			temp+=(char)(n%10+48);
			n/=10;
		  }
		  for(std::string::reverse_iterator it = temp.rbegin(); it != temp.rend(); ++it)
		  {
			retStr+=*it;
		  }
		  return retStr;
		}

		std::string range_extraction(std::vector<int> args) 
		{
		  std::string retStr;
		  int poz=0;
		  for(int i = 1; i <= args.size(); ++i)
		  {
			if(args[i]-args[i-1] != 1)
			{
			  if(i-poz > 2)
			  {
				retStr+=pars(args[poz]);
				retStr+='-';
				retStr+=pars(args[i-1]);
				retStr+=',';
			  }
			  else if(i-poz == 2)
			  {
				retStr+=pars(args[poz]);
				retStr+=',';        
				retStr+=pars(args[poz+1]);
				retStr+=',';        
			  }
			  else
			  {
				retStr+=pars(args[poz]);
				retStr+=','; 
			  }
			  poz=i;
			}
		  }
		  retStr.pop_back();
		  return retStr;
		}