kata: https://www.codewars.com/kata/range-extraction
cod:

	int twice_as_old(int dad, int son) 
	{
	  return son-dad+son > 0 ? son-dad+son : dad-son-son;
	}
	

kata: https://www.codewars.com/kata/correct-the-mistakes-of-the-character-recognition-software
cod:

	#include <string>

	std::string correct(std::string str)
	{
	  std::replace(str.begin(), str.end(), '5', 'S');
	  std::replace(str.begin(), str.end(), '0', 'O');
	  std::replace(str.begin(), str.end(), '1', 'I');
	  return str;
	}
	
	
kata: https://www.codewars.com/kata/the-feast-of-many-beasts
cod:

	#include <string>

	bool feast(std::string beast, std::string dish)
	{
	  return beast[0] == dish[0] && beast[beast.length()-1] ==  dish[dish.length()-1];
	}
	
	
kata: https://www.codewars.com/kata/form-the-minimum
cod:

	#include <vector>
	#include <set>

	using namespace std; 

	unsigned long long minValue (vector <int> values)
	{
	  int ret=0;
	  std::set<int> mySet; 
	  mySet.insert(values.begin(),values.end());
	  
	  for(auto& i : mySet)
		ret=ret*10+i;
		
	  return ret ; 
	}
	
	
kata: https://www.codewars.com/kata/tram-capacity
cod:

	int tram(int stops, const vector<int>& a, const vector<int>& b) 
	{
	  int max=0;
	  int value=0;
	  
	  for(int i = 0; i < stops; ++i)
	  {  
		value+=b[i]-a[i];
		if(max<value)
		  max=value;
	  }
	  
	  return max;
	}
	
	
kata: https://www.codewars.com/kata/simple-fun-number-1-seats-in-theater
cod:

	int seats_in_theater(int total_col, int total_row, int col, int row) 
	{
	  return (total_col - col + 1) * (total_row - row);
	}
	
	
kata: https://www.codewars.com/kata/return-pyramids
cod:
	std::string pyramid(int n)
	{
	  std::string retStr;
	  for(int i = 1; i <= n; ++i)
	  {
		for(int j = 1; j <=n-i; ++j)
		  retStr += ' ';
		  
		retStr += '/';
		
		for(int j = 1; j <=(i-1)*2; ++j)
		  retStr += i != n ? ' ' : '_';
		  
		retStr += '\\';
		retStr += '\n';
	  }
	  return retStr;
	}
	
	
kata: https://www.codewars.com/kata/return-location
cod:
	class Person
	{
		public:
			Person(int x, int y, int z)
				: m_x(x), m_y(y), m_z(z)
			{
			}
			
			void location(int& x, int& y, int& z)
			{
				x = m_x;
				y = m_y;
				z = m_z;
			}
			
		private:
			int m_x;
			int m_y;
			int m_z;
	};
	
