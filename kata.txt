kata: https://www.codewars.com/kata/50654ddff44f800200000004
cod:

		int multiply(int a, int b)
		{
			return a * b;
		}

		
kata: https://www.codewars.com/kata/57eae65a4321032ce000002d
cod:


		#include <string>

		std::string fakeBin(std::string str)
		{
		  for(std::string::iterator it=str.begin();it != str.end(); ++it)
			*it=*it<'5'? '0': '1';
		  
		  return str;
		}
		
kata: https://www.codewars.com/kata/5aff237c578a14752d0035ae
cod:

		#include <math.h>

		int predictAge(int age1, int age2, int age3, int age4, int age5, int age6, int age7, int age8)
		{
		  return (int) ( sqrt(age1*age1 + age2*age2 + age3*age3 + age4*age4 + age5*age5 + age6*age6 + age7*age7 + age8*age8) )/2;
		}
		
		
kata: https://www.codewars.com/kata/56b7f2f3f18876033f000307
cod:

		bool isAscOrder(std::vector<int> arr)
		{
			int comp=*(arr.begin());
			for(std::vector<int>::iterator it=(arr.begin()+1); it != arr.end(); ++it)
			{
			  if(comp>*it)
				return false;
			  comp=*it;
			}
			
			return true;
		}

		
kata: https://www.codewars.com/kata/554ca54ffa7d91b236000023
cod:

		#include <algorithm>
		#include <unordered_set>

		std::vector<int> deleteNth(std::vector<int> arr, int n)
		{
		  std::unordered_multiset<int> myCount;
		  std::vector<int>::iterator myEnd = arr.end();
		  
		  for(std::vector<int>::iterator it = arr.begin();it != myEnd; ++it)
		  {
			myCount.insert(*it);
			if(myCount.count(*it)>n)
			{
			  int temp=*it;
			  myEnd=remove(it,myEnd,temp);
			  --it;
			}
		  }
		  arr.end()=arr.erase(myEnd,arr.end());
		  return arr;
		}

		
kata: https://www.codewars.com/kata/529eef7a9194e0cbc1000255
cod:

		bool isAnagram(std::string test, std::string original)
		{
		  int v1[27];
		  int v2[27];
		  memset(v1,0,sizeof(v1));
		  memset(v2,0,sizeof(v2));
		  
		  if(test.length() != original.length())
			return false;
			
		  for(std::string::iterator it=test.begin();it != test.end(); ++it)
			v1[tolower(*it) - 'a' ]++;
		  
		  for(std::string::iterator it=original.begin();it != original.end(); ++it)
			v2[tolower(*it) - 'a' ]++;
		  
		  for(int i = 0;i < 27; ++i)
			if(v1[i] != v2[i])
			  return false;
		  
		  return true;
		}

		
kata: https://www.codewars.com/kata/517abf86da9663f1d2000003
cod:

		std::string to_camel_case(std::string text) 
		{
		  for(std::string::iterator c = text.begin(); c != text.end(); ++c)
			if(*c == '_' || *c == '-')
			  *(c+1)=toupper( *(c+1) );
			  
		  text.end()=text.erase( remove( text.begin(), text.end(), '_' ), text.end() );
		  text.end()=text.erase( remove( text.begin(), text.end(), '-' ), text.end() );
		  return text;
		}

		
kata: https://www.codewars.com/kata/563b662a59afc2b5120000c6
cod:

		class Arge
		{
		  public:
		  static int nbYear(int p0, double percent, int aug, int p);
		};

		int Arge::nbYear(int p0, double percent, int aug, int p)
		{  
		  int years = 0;
		  
		  while(p > p0)
		  {
			++years;
			p0=(int)(p0*(1+percent/100)) + aug;
		  }
		  
		  return years;
		}

		
kata: https://www.codewars.com/kata/5813d19765d81c592200001a
cod:

		int dontGiveMeFive(int start, int end)
		{
		  int count =0 ;
		  for(int i=start;i<=end;++i)
		  {
			int x=i;
			while(x!=0)
			{
			  if(x%10==5 || x%10==(-5))
			  {
				x=0;
				count++;
			  }
			  x/=10;
			}
		  }
		  return end-start+1-count;
		}

		
kata: https://www.codewars.com/kata/54bf1c2cd5b56cc47f0007a1
cod:

#include <ctype.h>
#include <unordered_set>

		size_t duplicateCount(const std::string& in); // helper for tests

		size_t duplicateCount(const char* in)
		{
			std::unordered_multiset<char> mySet;
			size_t count=0;
			
			for(; *in != '\0'; ++in)
			{
			  mySet.insert(tolower(*in));
			  count+= mySet.count(tolower(*in)) == 2 ? 1 : 0;
			}
			  
			return count;
		}


